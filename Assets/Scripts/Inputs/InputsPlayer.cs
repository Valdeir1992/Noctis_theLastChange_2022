//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Inputs/InputsPlayer.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputsPlayer : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputsPlayer()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputsPlayer"",
    ""maps"": [
        {
            ""name"": ""Leonora"",
            ""id"": ""275ba8fc-9d22-4c55-ad68-b85f3e60338a"",
            ""actions"": [
                {
                    ""name"": ""MoveDirection"",
                    ""type"": ""Value"",
                    ""id"": ""11465dab-1298-4798-a323-416d829de0f3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ActionOne"",
                    ""type"": ""Button"",
                    ""id"": ""2d8198b2-73b2-40dc-bf44-457674462d1d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Camera"",
                    ""type"": ""Value"",
                    ""id"": ""032bbb33-72c9-4553-a853-e023fd09b85c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""06b9aba0-458b-4f31-9227-66545421db4d"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""f98c160a-1460-4814-87a7-6608b97e5baf"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDirection"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e40ef2fc-d34c-4f8b-8cec-b2536f82f8a7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0d47597e-fc74-4f2e-83ed-e6ec8aa847a2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""59ac5b8e-9a23-4ea4-bafb-a19b08dac92d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""fbb2806b-b8fe-4215-b697-784a996cca6f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""dfce6b1e-7797-40bb-94a4-7a43a334b11a"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActionOne"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e216977-6614-424f-aacf-6b56c1bfbf1a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActionOne"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4180d6b1-a06a-4e02-8bd2-f425600a3ea8"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4be05d67-e2b9-41b7-9853-3c06dcf98f81"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Leonora
        m_Leonora = asset.FindActionMap("Leonora", throwIfNotFound: true);
        m_Leonora_MoveDirection = m_Leonora.FindAction("MoveDirection", throwIfNotFound: true);
        m_Leonora_ActionOne = m_Leonora.FindAction("ActionOne", throwIfNotFound: true);
        m_Leonora_Camera = m_Leonora.FindAction("Camera", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Leonora
    private readonly InputActionMap m_Leonora;
    private ILeonoraActions m_LeonoraActionsCallbackInterface;
    private readonly InputAction m_Leonora_MoveDirection;
    private readonly InputAction m_Leonora_ActionOne;
    private readonly InputAction m_Leonora_Camera;
    public struct LeonoraActions
    {
        private @InputsPlayer m_Wrapper;
        public LeonoraActions(@InputsPlayer wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveDirection => m_Wrapper.m_Leonora_MoveDirection;
        public InputAction @ActionOne => m_Wrapper.m_Leonora_ActionOne;
        public InputAction @Camera => m_Wrapper.m_Leonora_Camera;
        public InputActionMap Get() { return m_Wrapper.m_Leonora; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeonoraActions set) { return set.Get(); }
        public void SetCallbacks(ILeonoraActions instance)
        {
            if (m_Wrapper.m_LeonoraActionsCallbackInterface != null)
            {
                @MoveDirection.started -= m_Wrapper.m_LeonoraActionsCallbackInterface.OnMoveDirection;
                @MoveDirection.performed -= m_Wrapper.m_LeonoraActionsCallbackInterface.OnMoveDirection;
                @MoveDirection.canceled -= m_Wrapper.m_LeonoraActionsCallbackInterface.OnMoveDirection;
                @ActionOne.started -= m_Wrapper.m_LeonoraActionsCallbackInterface.OnActionOne;
                @ActionOne.performed -= m_Wrapper.m_LeonoraActionsCallbackInterface.OnActionOne;
                @ActionOne.canceled -= m_Wrapper.m_LeonoraActionsCallbackInterface.OnActionOne;
                @Camera.started -= m_Wrapper.m_LeonoraActionsCallbackInterface.OnCamera;
                @Camera.performed -= m_Wrapper.m_LeonoraActionsCallbackInterface.OnCamera;
                @Camera.canceled -= m_Wrapper.m_LeonoraActionsCallbackInterface.OnCamera;
            }
            m_Wrapper.m_LeonoraActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveDirection.started += instance.OnMoveDirection;
                @MoveDirection.performed += instance.OnMoveDirection;
                @MoveDirection.canceled += instance.OnMoveDirection;
                @ActionOne.started += instance.OnActionOne;
                @ActionOne.performed += instance.OnActionOne;
                @ActionOne.canceled += instance.OnActionOne;
                @Camera.started += instance.OnCamera;
                @Camera.performed += instance.OnCamera;
                @Camera.canceled += instance.OnCamera;
            }
        }
    }
    public LeonoraActions @Leonora => new LeonoraActions(this);
    public interface ILeonoraActions
    {
        void OnMoveDirection(InputAction.CallbackContext context);
        void OnActionOne(InputAction.CallbackContext context);
        void OnCamera(InputAction.CallbackContext context);
    }
}
